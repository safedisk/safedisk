#!/usr/bin/env python
#
#  SafeDisk
#  Copyright (C) 2014 Jeremy Bruestle
#  Copyright (C) 2014 Frank Laub
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Affero General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Affero General Public License for more details.
#
#  You should have received a copy of the GNU Affero General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
from glob import glob
from fabricate import *

def pkg_config(flags, lib):
	return shell('pkg-config', flags, lib).strip().split()

BASE_FLAGS = [
	'-fPIC',
	'-Wall',
	'-Werror',
]

LIB_FLAGS = BASE_FLAGS + pkg_config('--cflags', 'libcrypto') + ['-std=c++11']
TEST_FLAGS = LIB_FLAGS + ['-I', 'src/lib/'] 
FUSE_FLAGS = BASE_FLAGS + pkg_config('--cflags', 'fuse') + ['-DFUSE_USE_VERSION=26']
LD_FLAGS = pkg_config('--libs', 'libcrypto') + ['-lscrypt']

CC = 'gcc'
CXX = 'g++'

def mkdir(path):
	if not os.path.isdir(path):
		os.makedirs(path)

def oname(build_dir, path, ext=''):
	filename = os.path.splitext(os.path.basename(path))[0]
	return os.path.join(build_dir, filename) + ext

def compile(build_dir, src_dir, flags, tool, ext):
	srcs = glob(os.path.join(src_dir, ext))
	objs = []
	for src in srcs:
		obj = oname(build_dir, src, '.o')
		run(tool, '-c', src, flags, '-o', obj, group='compile')
		objs += [obj]
	return objs

def compile_cxx(build_dir, src_dir, flags):
	return compile(build_dir, src_dir, flags, CXX, '*.cpp')

def compile_c(build_dir, src_dir, flags):
	return compile(build_dir, src_dir, flags, CC, '*.c')

def link_exe(build_dir, name, objs, flags = []):
	exe_name = oname(build_dir, name)
	run(CXX, objs, LD_FLAGS + flags, '-o', exe_name, after='compile')

def link_so(build_dir, name, objs):
	so_name = oname(build_dir, name, '.so')
	run(CXX, objs, LD_FLAGS + flags, '-shared', '-o', so_name, after='compile')

def build_daemon(variant, flags):
	build_dir = 'out/{}'.format(variant)

	mkdir(build_dir)
	lib_objs = compile_cxx(build_dir, 'src/lib', LIB_FLAGS + flags)
	test_objs = compile_cxx(build_dir, 'src/test', TEST_FLAGS + flags)
	fuse_objs = compile_c(build_dir, 'src/fuse', FUSE_FLAGS + flags)
	link_exe(build_dir, 'unittest', lib_objs + test_objs)
	link_exe(build_dir, 'safediskd', lib_objs + fuse_objs, 
		pkg_config('--libs', 'fuse') + [
			'-Wno-error=unused-command-line-argument'
		]
	)

def build_qt(variant, flags):
	build_dir = os.path.join(os.getcwd(), 'out', variant, 'qt')
	Makefile = os.path.join(build_dir, 'Makefile')

	run('qmake', 'qt/QtSafeDisk.pro', 'CONFIG+=x86_64', flags, '-o', Makefile)
	run('make', '-C', build_dir)

def build():
	build_daemon('release', ['-O3'])
	build_qt('release', [])

def debug():
	build_daemon('debug', ['-g'])
	build_qt('debug', ['CONFIG+=debug'])

def install_libs(lib_dir, libs, deps):
	mkdir(lib_dir)

	for lib in libs:
		run('cp', '-RL', lib, lib_dir)

	os.system('chmod -R +w ' + lib_dir)

	for lib in libs:
		lib_name = os.path.basename(lib)
		rpath = '@executable_path/../Frameworks/' + lib_name
		run('install_name_tool', '-id', rpath, os.path.join(lib_dir, lib_name))

	for exe, libs in deps.items():
		for lib in libs:
			lib_name = os.path.basename(lib)
			rpath = '@executable_path/../Frameworks/' + lib_name
			run('install_name_tool', '-change', lib, rpath, exe)


def package():
	build()
	variant_dir = os.path.join(os.getcwd(), 'out', 'release')
	build_dir = os.path.join(variant_dir, 'qt')
	app = os.path.join(build_dir, 'SafeDisk.app')
	lib_dir = os.path.join(app, 'Contents', 'Frameworks')

	libs = [
		'/usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib'
	]

	deps = {
		os.path.join(app, 'Contents', 'MacOs', 'safediskd') : [
			'/usr/local/opt/openssl/lib/libcrypto.1.0.0.dylib'
		]
	}

	run('macdeployqt', app)

	install_libs(lib_dir, libs, deps)

	run('pkgbuild', 
		'--identifier', 'com.github.osxfuse.pkg', 
		'--nopayload', 
		'--scripts', 'pkg/osx/Scripts', 
		os.path.join(build_dir, 'osxfuse.pkg')
	)
	run('pkgbuild', 
		'--identifier', 'com.jfcinc.SafeDisk.pkg', 
		'--component', app,
		'--install-location', '/Applications', 
		os.path.join(build_dir, 'SafeDisk.pkg')
	)
	pkg_dir = os.path.join(variant_dir, 'pkg')
	mkdir(pkg_dir)
	run('productbuild', 
		'--package', os.path.join(build_dir, 'osxfuse.pkg'),
		'--package', os.path.join(build_dir, 'SafeDisk.pkg'),
		os.path.join(pkg_dir, 'SafeDisk.pkg')
	)
	dmg = os.path.join(variant_dir, 'SafeDisk.dmg')
	if os.path.exists(dmg):
		os.remove(dmg)
	run('hdiutil', 
		'create', dmg,
		'-volname', 'SafeDisk Installer', 
		'-fs', 'HFS+', 
		'-srcfolder', pkg_dir
	)

def clean():
	autoclean()

main()
